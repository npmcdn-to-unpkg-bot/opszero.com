---
title: Serverless Buy Button Using Stripe
layout: docs
---
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Introduction</a></li>
<li><a href="#sec-2">2. Tools</a></li>
<li><a href="#sec-3">3. IAM Role</a></li>
<li><a href="#sec-4">4. Backend</a>
<ul>
<li><a href="#sec-4-1">4.1. DynamoDB Table</a></li>
<li><a href="#sec-4-2">4.2. AWS Lambda Function</a>
<ul>
<li><a href="#sec-4-2-1">4.2.1. config.json</a></li>
<li><a href="#sec-4-2-2">4.2.2. index.js</a></li>
<li><a href="#sec-4-2-3">4.2.3. download.js</a></li>
<li><a href="#sec-4-2-4">4.2.4. invoice.js</a></li>
<li><a href="#sec-4-2-5">4.2.5. AWS Lambda Policy</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#sec-5">5. Website</a>
<ul>
<li><a href="#sec-5-1">5.1. Webpage</a></li>
<li><a href="#sec-5-2">5.2. JavaScript</a>
<ul>
<li><a href="#sec-5-2-1">5.2.1. js/creds.js</a></li>
<li><a href="#sec-5-2-2">5.2.2. js/serverless-ecommerce.js</a></li>
</ul>
</li>
<li><a href="#sec-5-3">5.3. Angular2</a></li>
</ul>
</li>
<li><a href="#sec-6">6. Download</a></li>
</ul>
</div>
</div>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Introduction</h2>
<div class="outline-text-2" id="text-1">
<p>
Running an E-commerce operation shouldn't be rocket science. We should
be able to handle increased load indefinitely without the servers
melting down on a peak day. In fact all we really should need is a
website, a payment processor (we are using <a href="https://stripe.com">Stripe</a>) and a bare minimum
of code to get started.
</p>

<p>
In this example we will be building an website that sells a book.  It
is a completely serverless architecture powered by <a href="https://aws.amazon.com/lambda/">AWS Lambda</a>. With
AWS's <a href="https://aws.amazon.com/free/">Free Tier</a> except for the Stripe transaction fees the cost of
running this infrastructure should be <b>near zero dollars</b> during the
first year.
</p>

<a class="btn btn-primary" href="/examples/serverless-ecommerce/www/">Demo Site</a>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Tools</h2>
<div class="outline-text-2" id="text-2">
<p>
We will be using the following technologies to run our E-commerce
site:
</p>

<ul class="org-ul">
<li><a href="https://www.cloudflare.com">Cloudflare</a>
</li>
<li><a href="https://aws.amazon.com/s3/">AWS S3</a>
</li>
<li><a href="https://aws.amazon.com/dynamodb/">AWS DynamoDB</a>
</li>
<li><a href="https://aws.amazon.com/lambda/">AWS Lambda</a>
</li>
<li><a href="https://stripe.com">Stripe</a>
</li>
</ul>

<p>
We will be using S3 to host our Website, Cloudflare for https and CDN,
DynamoDB to keep track of our transactions, Lambda for processing the
transactions and creating a charge.
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> IAM Role</h2>
<div class="outline-text-2" id="text-3">
<p>
Before we get started we need to create an IAM role that we will be
using on the website that allows invoking Lambda fuctions.
</p>

<p>
Follow <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_create.html">this guide</a> for creating an IAM role. Attach the following user
policy to that IAM account. Replace the <code>YOUR_AWS_ACCOUNT_NUMBER</code> with
your AWS account number. What this does is say that the account can
only invoke the AWS Lambda function named <code>ackin_store_example-dev</code>
and nothing else.
</p>

<p>
To do this you need to create an IAM Policy that can then be attached
to a new IAM user. This is the policy document:
</p>

<div class="org-src-container">

<pre class="src src-json">{
    "Version": "2012-10-17",
    "Statement": [
	{
	    "Sid": "Stmt1458602899000",
	    "Effect": "Allow",
	    "Action": [
		"lambda:InvokeFunction"
	    ],
	    "Resource": [
		"arn:aws:lambda:us-west-2:451305228097:function:acksin_store_example-dev"
	    ]
	}
    ]
}
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> Backend</h2>
<div class="outline-text-2" id="text-4">
</div><div id="outline-container-sec-4-1" class="outline-3">
<h3 id="sec-4-1"><span class="section-number-3">4.1</span> DynamoDB Table</h3>
<div class="outline-text-3" id="text-4-1">
<p>
Create a AWS DynamoDB Table with the default settings. We'll name it
<code>AcksinStoreTransactions</code> with the default key being <code>customerId</code> and
a string type.
</p>
</div>
</div>

<div id="outline-container-sec-4-2" class="outline-3">
<h3 id="sec-4-2"><span class="section-number-3">4.2</span> AWS Lambda Function</h3>
<div class="outline-text-3" id="text-4-2">
<p>
The AWS Lambda function does the following:
</p>

<ul class="org-ul">
<li>It receives the <code>stripeToken</code>
</li>
<li>It creates a Stripe Customer and stores it in our DynamoDB.
</li>
<li>It charges the customer.
</li>
<li>It returns a link to our content.
</li>
</ul>
</div>

<div id="outline-container-sec-4-2-1" class="outline-4">
<h4 id="sec-4-2-1"><span class="section-number-4">4.2.1</span> config.json</h4>
<div class="outline-text-4" id="text-4-2-1">
<div class="org-src-container">

<pre class="src src-json">{
    "STORE_TABLE": "AcksinStoreTransactions",
    "STRIPE_SECRET_KEY": "sk_test_E018BTiHuKj6TmvUNWrL4Ue3",
    "EMAIL_FROM": "hey@acksin.com",
    "PRODUCTS": {
	"ServerlessExampleBook": {
	    "name": "Serverless Example Book",
	    "amount": 1400,
	    "downloadLink": {
		"s3Bucket": "assets",
		"s3Key": "foo/bar/book.pdf"
	    }
	}
    }
}
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-4-2-2" class="outline-4">
<h4 id="sec-4-2-2"><span class="section-number-4">4.2.2</span> index.js</h4>
<div class="outline-text-4" id="text-4-2-2">
<div class="org-src-container">

<pre class="src src-js">console.log('Loading Acksin Store function');

// dependencies
var AWS = require('aws-sdk');

// Get reference to AWS clients
var dynamodb = new AWS.DynamoDB();

// Link generator. Included in the Purchased version.
var download = require('./download.js');

// Invoice email generator. Included in the Purchased version.
var invoice = require('./invoice.js');

var config = require('./config.json');

var stripe = require("stripe")(config.STRIPE_SECRET_KEY);

exports.handler = function(event, context) {
    var stripeToken = event.stripeToken;
    var email = event.email;
    var product = event.product;

    console.log("Received" + email + " " + product +  " " + stripeToken);

    if(product in config.PRODUCTS) {
	var amount = config.PRODUCTS[product].amount;

	console.log(product + " is in our PRODUCTS");
	console.log("" + amount + " is in our amount");

	stripe.customers.create({
	    source: stripeToken,
	    description: email,
	}).then(function(customer) {
	    console.log("Creating the charge");

	    return stripe.charges.create({
		amount: amount, // amount in cents, again
		currency: "usd",
		customer: customer.id
	    });
	}).then(function(charge) {
	    console.log("Adding item to the Table: " + config.STORE_TABLE);

	    // Generate a downloadLink to give the user.
	    download.getDownloadLink(config.PRODUCTS[product].downloadLink, function(err, url) {
		dynamodb.putItem({
		    TableName: config.STORE_TABLE,
		    Item: {
			customerId: {
			    S: charge.customer
			},
			chargeId: {
			    S: charge.id
			},
			email: {
			    S: email
			},
			product: {
			    S: product
			},
			downloadLink: {
			    S: url
			},
			livemode: {
			    BOOL: charge.livemode
			}
		    }
		}, function(err, data) {
		    if(err != null) {
			console.log(err)
			context.fail();
		    } else {
			console.log("success");

			invoice.sendInvoiceEmail(email, config.PRODUCTS[product], downloadLink);

			context.succeed({
			    downloadLink: url
			});
		    }
		});
	    });
	});
    } else {
	context.fail();
    }
}
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-4-2-3" class="outline-4">
<h4 id="sec-4-2-3"><span class="section-number-4">4.2.3</span> download.js</h4>
<div class="outline-text-4" id="text-4-2-3">
<div class="org-src-container">

<pre class="src src-js">var AWS = require('aws-sdk');

var s3 = new AWS.S3();

exports.getDownloadLink = function(existingLink, fn) {
    var params = {
	Bucket: existingLink.s3Bucket,
	Key: existingLink.s3Key,
	Expires: 259200 // 3 day link.
    };

    s3.getSignedUrl('putObject', params, fn);
}
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-4-2-4" class="outline-4">
<h4 id="sec-4-2-4"><span class="section-number-4">4.2.4</span> invoice.js</h4>
<div class="outline-text-4" id="text-4-2-4">
<div class="org-src-container">

<pre class="src src-js">var AWS = require('aws-sdk');

var ses = new AWS.SES();

exports.sendInvoiceEmail = function(email, product, downloadLink) {
    ses.sendEmail({
	Source: config.FROM_EMAIL,
	Destination: {
	    ToAddresses: [
		email
	    ],
	    BccAddresses: [
		config.FROM_EMAIL
	    ]
	},
	Message: {
	    Subject: {
		Data: "Acksin Purchase Confirmation"
	    },
	    Body: {
		// Html: {
		//     Data: '&lt;html&gt;&lt;head&gt;'
		//         + '&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /&gt;'
		//         + '&lt;title&gt;Acksin Purchase Confirmation&lt;/title&gt;'cksin
		//         + '&lt;/head&gt;&lt;body&gt;'
		//         + 'Please &lt;a href="' + verificationLink + '"&gt;click here to verify your email address&lt;/a&gt; or copy &amp; paste the following link in a browser:'
		//         + '&lt;br&gt;&lt;br&gt;'
		//         + '&lt;a href="' + verificationLink + '"&gt;' + verificationLink + '&lt;/a&gt;'
		//         + '&lt;/body&gt;&lt;/html&gt;'
		Text: {
		    Data: "Acksin Purchase Confirmation\n"
			+ ""
			+ "Product: " + product.name
			+ "\n"
			+ "Amount Billed: " + product.amount / 100.0
			+ "\n"
			+ "Download Link: " + downloadLink
			+ "\n\n\n"
			+ "Thank You.\n\n"
			+ "Acksin Team"
		}
	    }
	}
    }, function(err, data) {
	if(err) {
	    console.log(err, err.stack); // an error occurred
	} else {
	    console.log(data);           // successful response
	}
    });
}
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-4-2-5" class="outline-4">
<h4 id="sec-4-2-5"><span class="section-number-4">4.2.5</span> AWS Lambda Policy</h4>
<div class="outline-text-4" id="text-4-2-5">
<p>
Here is the Policy file that we need to attach to the function. As
always replace <code>YOUR_AWS_ACCOUNT_NUMBER=</code> with your AWS Account
number.
</p>

<div class="org-src-container">

<pre class="src src-json">{
    "Version": "2012-10-17",
    "Statement": [
	{
	    "Sid": "PutItemToStoreTransactionsTable",
	    "Effect": "Allow",
	    "Action": [
		"dynamodb:PutItem"
	    ],
	    "Resource": "arn:aws:dynamodb:us-west-2:451305228097:table/AcksinStoreTransactions"
	},
	{
	    "Sid": "",
	    "Resource": "*",
	    "Action": [
		"logs:*"
	    ],
	    "Effect": "Allow"
	}
    ]
}
</pre>
</div>
</div>
</div>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> Website</h2>
<div class="outline-text-2" id="text-5">
<p>
To process transactions we should do everything on an https enabled
site. Unfortunately, https costs money especially when you want to
just try out to see if something works. Fortunately for this we can
use <a href="https://www.cloudflare.com/ssl/">Cloudflare</a> as the CDN to our AWS S3 website. Cloudflare also
provides a free SSL certificate for free.
</p>
</div>

<div id="outline-container-sec-5-1" class="outline-3">
<h3 id="sec-5-1"><span class="section-number-3">5.1</span> Webpage</h3>
<div class="outline-text-3" id="text-5-1">
<p>
Here is an extremely simple Bootstrap powered site featuring a credit
card form. We will be selling a book on the site. Store it as
<code>index.html</code>. As you can see we are including the AWS JS SDK which is
what we are using to invoke our Lambda function.
</p>

<div class="org-src-container">

<pre class="src src-html">&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
  &lt;head&gt;
    &lt;title&gt;Acksin Serverless E-commerce with Stripe&lt;/title&gt;

    &lt;!-- Bootstrap CSS and JS --&gt;
    &lt;link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css"
	  rel="stylesheet"
	  integrity="sha384-1q8mTJOASx8j1Au+a5WDVnPi2lkFfwwEAa8hDDdjZlpLegxhjVME1fgjWPGmkzs7"
	  crossorigin="anonymous"&gt;
    &lt;script src="https://code.jquery.com/jquery-2.2.3.min.js"&gt;&lt;/script&gt;
    &lt;script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js"
	    integrity="sha384-0mSbJDEHialfmuBBQP6A4Qrprq5OVfW37PRR3j5ELqxss1yVqOtnepnHVP9aJ7xS"
	    crossorigin="anonymous"&gt;&lt;/script&gt;

    &lt;!-- Include the AWS JS Library --&gt;
    &lt;script src="https://sdk.amazonaws.com/js/aws-sdk-2.3.3.min.js"&gt;&lt;/script&gt;
    &lt;!-- Include the Stripe JS Library --&gt;
    &lt;script type="text/javascript" src="https://js.stripe.com/v2/"&gt;&lt;/script&gt;

    &lt;script src="./js/serverless-ecommerce.js"&gt;&lt;/script&gt;
  &lt;/head&gt;

  &lt;body&gt;
    &lt;div class="container"&gt;
      &lt;div class="row"&gt;
	&lt;div class="col-md-8"&gt;
	  &lt;h1&gt;Acksin DevOps Book Example&lt;/h1&gt;
	  &lt;p&gt;This is an example DevOps book that you can probably
	    buy if we had written it. It is priced at &lt;b&gt;$14.00&lt;/b&gt;
	    and we expect to get a link back to download it when
	    it's done. You can test the form
	    with &lt;a href="https://stripe.com/docs/testing"&gt;these
	      numbers&lt;/a&gt;.&lt;/p&gt;

	  &lt;p&gt;
	    &lt;form action="" method="POST" id="payment-form"&gt;
	      &lt;!-- We will be checking for this in the function --&gt;
	      &lt;input type="hidden" name="product" value="ServerlessExampleBook" /&gt;
	      &lt;input type="hidden" name="amount" value="1400" /&gt;

	      &lt;div class="form-group"&gt;
		&lt;label&gt;
		  &lt;label&gt;Email&lt;/label&gt;
		  &lt;input type="email" name="email" value="" class="form-control"  /&gt;
		&lt;/label&gt;
	      &lt;/div&gt;

	      &lt;label class="payment-errors"&gt;&lt;/label&gt;

	      &lt;div class="form-group"&gt;
		&lt;label&gt;
		  &lt;label&gt;Card Number&lt;/label&gt;
		  &lt;input type="text" size="20" data-stripe="number"  class="form-control" /&gt;
		&lt;/label&gt;
	      &lt;/div&gt;

	      &lt;div class="form-group"&gt;
		&lt;label&gt;
		  &lt;label&gt;CVC&lt;/label&gt;
		  &lt;input type="text" size="4" data-stripe="cvc" class="form-control" /&gt;
		&lt;/label&gt;
	      &lt;/div&gt;

	      &lt;div class="form-group input-group"&gt;
		&lt;label&gt;Expiration (MM/YYYY)&lt;/label&gt;
		&lt;br&gt;
		&lt;input type="text" size="2" data-stripe="exp-month" /&gt;
		&lt;span&gt; / &lt;/span&gt;
		&lt;input type="text" size="4" data-stripe="exp-year" /&gt;
	      &lt;/div&gt;

	      &lt;button type="submit" class="btn btn-primary"&gt;Submit Payment&lt;/button&gt;
	    &lt;/form&gt;
	  &lt;/p&gt;
	&lt;/div&gt;

	&lt;div id="download-link"&gt;&lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;!-- /.container --&gt;
  &lt;/body&gt;
&lt;/html&gt;
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-5-2" class="outline-3">
<h3 id="sec-5-2"><span class="section-number-3">5.2</span> JavaScript</h3>
<div class="outline-text-3" id="text-5-2">
<p>
Here is the corresponding JavaScript for the site. Store it as
<code>js/config.js</code> and <code>js/serverless-ecommerce.js</code>. Get the security
credentials from the user you generated and fill in the region that
you hosted your AWS Lambda in. Also get your Stripe key and fill it
in.
</p>
</div>


<div id="outline-container-sec-5-2-1" class="outline-4">
<h4 id="sec-5-2-1"><span class="section-number-4">5.2.1</span> js/creds.js</h4>
<div class="outline-text-4" id="text-5-2-1">
<div class="org-src-container">

<pre class="src src-js">AWS.config = new AWS.Config({
    accessKeyId: '',  // Change to your ACCESS_KEY_FOR_IAM_USER
    secretAccessKey: '', // Change to your SECRET_KEY_FOR_IAM_USER
    region: 'us-west-2'
});

Stripe.setPublishableKey('pk_test_Wl3qsnArSjA9CLXwp8IKPTVm'); // Get a Stripe API key.

var PurchaseLambdaFunction = 'acksin_store_example-dev';
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-5-2-2" class="outline-4">
<h4 id="sec-5-2-2"><span class="section-number-4">5.2.2</span> js/serverless-ecommerce.js</h4>
<div class="outline-text-4" id="text-5-2-2">
<div class="org-src-container">

<pre class="src src-js">$(document).ready(function() {
    $("#payment-form").submit(function() {
	var $form = $(this);

	// Disable the submit button to prevent repeated clicks
	$form.find('button').prop('disabled', true);

	Stripe.card.createToken($form, function(status, response) {
	    var $form = $('#payment-form');

	    if (response.error) {
		// Show the errors on the form
		$form.find('.payment-errors').text(response.error.message);
		$form.find('button').prop('disabled', false);
	    } else {
		// response contains id and card, which contains additional card details
		var token = response.id;
		// Insert the token into the form so it gets submitted to the server
		$form.append($('&lt;input type="hidden" name="stripeToken" /&gt;').val(token));

		var data = {};
		$form.serializeArray().map(function(x) {
		    data[x.name] = x.value;
		});

		var lambda = new AWS.Lambda();
		lambda.invoke({
		    FunctionName: PurchaseLambdaFunction,
		    Payload: JSON.stringify(data)
		}, function(err, data) {
		    if (err) {
			console.log(err, err.stack);
		    } else {
			var output = JSON.parse(data.Payload);
			if (output != null &amp;&amp; output.downloadLink) {
			    $("#download-link").html("Download the file at " + output.downloadLink);
			} else {
			    $("#download-link").html("Purchase Failed");
			}
		    }
		});
	    }
	});

	// Prevent the form from submitting with the default action
	return false;
    })
})
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-sec-5-3" class="outline-3">
<h3 id="sec-5-3"><span class="section-number-3">5.3</span> Angular2</h3>
<div class="outline-text-3" id="text-5-3">
<div class="org-src-container">

<pre class="src src-js">import {Component, Input} from 'angular2/core';

declare var Stripe: any;

class class PurchaseForm {
    constructor(
	public email: string,
	public product: string,
	public stripeToken: string
    ) { }
}

interface Product {
    key: string;
    name: string;
    amount: string;
}

@Component({
    selector: 'acksin-purchase',
    template: `
&lt;div [hidden]="paymentFormHidden"&gt;
&lt;form action="" method="POST" id="payment-form"&gt;
&lt;!-- We will be checking for this in the function --&gt;

&lt;div class="form-group"&gt;
&lt;label&gt;Product&lt;/label&gt;
&lt;div *ngFor="#i of purchaseChoices"&gt;
&lt;input type="radio" name="product" (click)="updateProduct(i.key)" /&gt; {{i.name}} - \${{i.amount}}
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="form-group"&gt;
&lt;label&gt;
&lt;label&gt;Email&lt;/label&gt;
&lt;input type="email" name="email" value="" class="form-control" [(ngModel)]="purchaseForm.email" /&gt;
&lt;/label&gt;
&lt;/div&gt;

&lt;div class="form-group"&gt;
&lt;label&gt;
&lt;label&gt;Card Number&lt;/label&gt;
&lt;input type="text" size="20" data-stripe="number"  class="form-control" [(ngModel)]="cardNumber" /&gt;
&lt;/label&gt;
&lt;/div&gt;

&lt;div class="form-group"&gt;
&lt;label&gt;
&lt;label&gt;CVC&lt;/label&gt;
&lt;input type="text" size="4" data-stripe="cvc" class="form-control"  [(ngModel)]="cvc" /&gt;
&lt;/label&gt;
&lt;/div&gt;

&lt;div class="form-group input-group"&gt;
&lt;label&gt;Expiration (MM/YYYY)&lt;/label&gt;
&lt;br&gt;
&lt;input type="text" size="2" data-stripe="exp-month"  [(ngModel)]="expMonth" /&gt;
&lt;span&gt; / &lt;/span&gt;
&lt;input type="text" size="4" data-stripe="exp-year"  [(ngModel)]="expYear" /&gt;
&lt;/div&gt;

&lt;div class="form-group"&gt;
&lt;label class="payment-errors"&gt;{{paymentErrors}}&lt;/label&gt;
&lt;/div&gt;

&lt;button (click)="submit()" [disabled]="disabledForm" type="submit" class="btn btn-success"&gt;Purchase&lt;/button&gt;
&lt;/form&gt;
&lt;/div&gt;

&lt;div [(hidden)]="downloadBoxHidden"&gt;
&lt;a [(href)]="downloadLink"&gt;Download&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;{{response}}&lt;/p&gt;`
})
export class AcksinPurchase {
    // Modify this to create more produts.
    products: { [id: string]: Product[]; } = {
	"acksinStore": [
	    { key: "AcksinStoreSingleSite", name: "Single Site License", amount: "39" },
	    { key: "AcksinSiteMultiStore", name: "Multi Site License", amount: "99"  }
	]
    };

    paymentFormHidden: bool = false;
    downloadBoxHidden: bool = true;
    disabledForm: bool = false;


    downloadLink: string = '';
    response: string = '';
    paymentErrors: string = '';

    cardNumber: string;
    cvc: string;
    expMonth: number;
    expYear: number;
    purchaseForm = new PurchaseForm();

    purchaseChoices: string[];

    constructor() {
	this.purchaseChoices = this.products[purchaseProduct];
    }


    updateProduct(product):void {
	console.log(product);
	this.purchaseForm.product = product;
    }

    submit() {
	var that = this;

	// Google Analytics  Event.
	// ga('send', 'event', 'Purchase', this.product, 'Purchase' + this.product + 'Email');

	console.log(JSON.stringify({
	    number: that.cardNumber,
	    cvc: that.cvc,
	    exp_month: that.expMonth,
	    exp_year: that.expYear
	}));


	that.disabledForm = true;

	Stripe.card.createToken({
	    number: that.cardNumber,
	    cvc: that.cvc,
	    exp_month: that.expMonth,
	    exp_year: that.expYear
	}, this.stripeHandler.bind(this));
    }


    stripeHandler(status, response):void {
	if (response.error) {
	    this.paymentErrors = response.error.message;
	} else {
	    this.purchaseForm.stripeToken = response.id;

	    console.log("Purchase Form:" + JSON.stringify(this.purchaseForm));

	    let lambda = new AWS.Lambda();
	    lambda.invoke({
		FunctionName: PurchaseLambdaFunction,
		Payload: JSON.stringify(this.purchaseForm)
	    }, this.lambdaHandler.bind(this));
	}
    }

    lambdaHandler(err, data):void {
	if (err) {
	    console.log(err, err.stack);
	} else {
	    var output = JSON.parse(data.Payload);
	    console.log(data.Payload)

	    if (output != null &amp;&amp; output.downloadLink) {
		this.paymentFormHidden = true;
		this.downloadBoxHidden = false;
		this.downloadLink = output.downloadLink;
	    } else {
		this.response = "Purchase Failed";
		this.disabledForm = false;
	    }
	}
    }
}
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6"><span class="section-number-2">6</span> Download</h2>
<div class="outline-text-2" id="text-6">
<p>
Download this solution <b>$99</b>.
</p>

<p>
Included:
</p>

<ul class="org-ul">
<li>AWS Lambda code and policy
</li>
<li>AngularJS 2 Component
</li>
<li>jQuery Code
</li>
<li>Email Support for one year upon purchase
</li>
<li>Support for 5 sites
</li>
<li>Commercial License
</li>
</ul>

<a href="https://transactions.sendowl.com/products/415001/FD2181FD/purchase" rel="nofollow"><img src="https://transactions.sendowl.com/assets/external/buy-now.png" /></a><script type="text/javascript" src="https://transactions.sendowl.com/assets/sendowl.js" ></script>

<p>
Also available as GPL on <a href="https://github.com/acksin/solutions">Github</a>.
</p>
</div>
</div>
